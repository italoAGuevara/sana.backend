// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sana.Data;

#nullable disable

namespace sana.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1dc55243-61d4-458c-b551-9485dce880e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cde95ce7-82f4-44f0-a17b-468bcb171aea",
                            Email = "customer1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER1@EXAMPLE.COM",
                            NormalizedUserName = "CUSTOMER1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK6i9ghk4rIyS66h3ivPLP6z10oVQW1NSu+VG5bY+LsUdDOVQF/ND7ueJn0x2nRgjA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "customer1@example.com"
                        },
                        new
                        {
                            Id = "8cfa87ba-3ed0-49b6-b6e7-0244a325e6d2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dbe09c89-5fad-4149-80a1-66d06965d295",
                            Email = "customer2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER2@EXAMPLE.COM",
                            NormalizedUserName = "CUSTOMER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAMcVZymno1ovi/t33yZpmmgy9hqDr7+UklJmub/PSjtHvPUkN10m+Lt0rHjW7OWXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "customer2@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("sana.Domain.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78f3e72c-16c3-4271-8de6-9a8acda8a479"),
                            CartID = new Guid("f7022d17-18c3-49fd-b094-2a77652060bc"),
                            CreateAt = new DateTime(2024, 6, 19, 18, 44, 7, 150, DateTimeKind.Utc).AddTicks(339),
                            ProductID = new Guid("b611c9da-8776-4f60-a567-8cf09221ab72"),
                            Quantity = 2
                        },
                        new
                        {
                            Id = new Guid("dcbdf708-4aa9-4fb9-be9a-44ae11121cee"),
                            CartID = new Guid("0b4cc4af-53c4-4ec9-98a0-c39ec80475fc"),
                            CreateAt = new DateTime(2024, 6, 19, 18, 44, 7, 150, DateTimeKind.Utc).AddTicks(343),
                            ProductID = new Guid("5a8ddc1f-5870-4f1a-9fdc-9c51c910af1e"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("sana.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("718fc848-eeac-438e-8a29-d162cf9e894f"),
                            CategoryName = "Electronics",
                            CreateAt = new DateTime(2024, 6, 19, 18, 44, 7, 149, DateTimeKind.Utc).AddTicks(9812)
                        },
                        new
                        {
                            Id = new Guid("f52d2a55-8420-4dd8-96bd-fb34a27b3d9e"),
                            CategoryName = "Clothing",
                            CreateAt = new DateTime(2024, 6, 19, 18, 44, 7, 149, DateTimeKind.Utc).AddTicks(9819)
                        },
                        new
                        {
                            Id = new Guid("dd757075-c056-40b1-8f6b-28455771f0b0"),
                            CategoryName = "Books",
                            CreateAt = new DateTime(2024, 6, 19, 18, 44, 7, 149, DateTimeKind.Utc).AddTicks(9824)
                        });
                });

            modelBuilder.Entity("sana.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dda4b40b-a7eb-45b8-bc98-d3598add1f56"),
                            CreateAt = new DateTime(2024, 6, 19, 18, 44, 7, 150, DateTimeKind.Utc).AddTicks(387),
                            TotalAmount = 219.97m,
                            UserId = "1dc55243-61d4-458c-b551-9485dce880e2"
                        },
                        new
                        {
                            Id = new Guid("1327b866-7175-4ae6-95e6-ef0dba346c74"),
                            CreateAt = new DateTime(2024, 6, 19, 18, 44, 7, 150, DateTimeKind.Utc).AddTicks(399),
                            TotalAmount = 19.99m,
                            UserId = "8cfa87ba-3ed0-49b6-b6e7-0244a325e6d2"
                        });
                });

            modelBuilder.Entity("sana.Domain.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1655f0b-b917-488a-b4b1-837c45dc03c5"),
                            CreateAt = new DateTime(2024, 6, 19, 18, 44, 7, 150, DateTimeKind.Utc).AddTicks(440),
                            OrderID = new Guid("dda4b40b-a7eb-45b8-bc98-d3598add1f56"),
                            ProductID = new Guid("b611c9da-8776-4f60-a567-8cf09221ab72"),
                            Quantity = 2,
                            UnitPrice = 999.99m
                        },
                        new
                        {
                            Id = new Guid("e412beae-ba53-408b-b8b1-da225cdf5d54"),
                            CreateAt = new DateTime(2024, 6, 19, 18, 44, 7, 150, DateTimeKind.Utc).AddTicks(446),
                            OrderID = new Guid("1327b866-7175-4ae6-95e6-ef0dba346c74"),
                            ProductID = new Guid("5a8ddc1f-5870-4f1a-9fdc-9c51c910af1e"),
                            Quantity = 1,
                            UnitPrice = 19.99m
                        });
                });

            modelBuilder.Entity("sana.Domain.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b611c9da-8776-4f60-a567-8cf09221ab72"),
                            CreateAt = new DateTime(2024, 6, 19, 18, 44, 7, 149, DateTimeKind.Utc).AddTicks(9901),
                            Description = "Latest smartphone model",
                            Price = 999.99m,
                            ProductName = "Smartphone",
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("5a8ddc1f-5870-4f1a-9fdc-9c51c910af1e"),
                            CreateAt = new DateTime(2024, 6, 19, 18, 44, 7, 149, DateTimeKind.Utc).AddTicks(9910),
                            Description = "Cotton t-shirt",
                            Price = 19.99m,
                            ProductName = "T-shirt",
                            Stock = 200
                        },
                        new
                        {
                            Id = new Guid("53d9a9b3-00e5-41c1-a001-102b413f0e1b"),
                            CreateAt = new DateTime(2024, 6, 19, 18, 44, 7, 149, DateTimeKind.Utc).AddTicks(9915),
                            Description = "Learn C# programming",
                            Price = 49.99m,
                            ProductName = "Programming Book",
                            Stock = 50
                        });
                });

            modelBuilder.Entity("sana.Domain.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            ProductID = new Guid("b611c9da-8776-4f60-a567-8cf09221ab72"),
                            CategoryID = new Guid("718fc848-eeac-438e-8a29-d162cf9e894f"),
                            CreateAt = new DateTime(2024, 6, 19, 18, 44, 7, 149, DateTimeKind.Utc).AddTicks(9981),
                            Id = new Guid("b30750cd-78fd-40f3-8be8-751dc9f47d48")
                        },
                        new
                        {
                            ProductID = new Guid("5a8ddc1f-5870-4f1a-9fdc-9c51c910af1e"),
                            CategoryID = new Guid("f52d2a55-8420-4dd8-96bd-fb34a27b3d9e"),
                            CreateAt = new DateTime(2024, 6, 19, 18, 44, 7, 149, DateTimeKind.Utc).AddTicks(9992),
                            Id = new Guid("704a100a-4171-4d91-8cc5-4ff23a7c1934")
                        },
                        new
                        {
                            ProductID = new Guid("53d9a9b3-00e5-41c1-a001-102b413f0e1b"),
                            CategoryID = new Guid("dd757075-c056-40b1-8f6b-28455771f0b0"),
                            CreateAt = new DateTime(2024, 6, 19, 18, 44, 7, 149, DateTimeKind.Utc).AddTicks(9995),
                            Id = new Guid("b9fe4fae-80b2-47cb-a5ce-8c3503cdfa80")
                        });
                });

            modelBuilder.Entity("sana.Domain.Models.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7022d17-18c3-49fd-b094-2a77652060bc"),
                            CreateAt = new DateTime(2024, 6, 19, 18, 44, 7, 150, DateTimeKind.Utc).AddTicks(39),
                            UserId = "1dc55243-61d4-458c-b551-9485dce880e2"
                        },
                        new
                        {
                            Id = new Guid("0b4cc4af-53c4-4ec9-98a0-c39ec80475fc"),
                            CreateAt = new DateTime(2024, 6, 19, 18, 44, 7, 150, DateTimeKind.Utc).AddTicks(288),
                            UserId = "8cfa87ba-3ed0-49b6-b6e7-0244a325e6d2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sana.Domain.Models.CartItem", b =>
                {
                    b.HasOne("sana.Domain.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sana.Domain.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("sana.Domain.Models.Order", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("sana.Domain.Models.OrderItem", b =>
                {
                    b.HasOne("sana.Domain.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sana.Domain.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("sana.Domain.Models.ProductCategory", b =>
                {
                    b.HasOne("sana.Domain.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sana.Domain.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("sana.Domain.Models.ShoppingCart", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("sana.Domain.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("sana.Domain.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("sana.Domain.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("sana.Domain.Models.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
